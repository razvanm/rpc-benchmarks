// This file was auto-generated by the vanadium vdl tool.
// Package: sink

package sink

import (
	"io"
	"v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
	"v.io/v23/security/access"
	"v.io/v23/vdl"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Interface definitions

// SinkClientMethods is the client interface
// containing Sink methods.
type SinkClientMethods interface {
	// Sync always returns nil.
	Sink(_ *context.T, Payload []byte, _ ...rpc.CallOpt) error
	// SyncStream always returns nil.
	SinkStream(*context.T, ...rpc.CallOpt) (SinkSinkStreamClientCall, error)
}

// SinkClientStub adds universal methods to SinkClientMethods.
type SinkClientStub interface {
	SinkClientMethods
	rpc.UniversalServiceMethods
}

// SinkClient returns a client stub for Sink.
func SinkClient(name string) SinkClientStub {
	return implSinkClientStub{name}
}

type implSinkClientStub struct {
	name string
}

func (c implSinkClientStub) Sink(ctx *context.T, i0 []byte, opts ...rpc.CallOpt) (err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Sink", []interface{}{i0}, nil, opts...)
	return
}

func (c implSinkClientStub) SinkStream(ctx *context.T, opts ...rpc.CallOpt) (ocall SinkSinkStreamClientCall, err error) {
	var call rpc.ClientCall
	if call, err = v23.GetClient(ctx).StartCall(ctx, c.name, "SinkStream", nil, opts...); err != nil {
		return
	}
	ocall = &implSinkSinkStreamClientCall{ClientCall: call}
	return
}

// SinkSinkStreamClientStream is the client stream for Sink.SinkStream.
type SinkSinkStreamClientStream interface {
	// SendStream returns the send side of the Sink.SinkStream client stream.
	SendStream() interface {
		// Send places the item onto the output stream.  Returns errors
		// encountered while sending, or if Send is called after Close or
		// the stream has been canceled.  Blocks if there is no buffer
		// space; will unblock when buffer space is available or after
		// the stream has been canceled.
		Send(item []byte) error
		// Close indicates to the server that no more items will be sent;
		// server Recv calls will receive io.EOF after all sent items.
		// This is an optional call - e.g. a client might call Close if it
		// needs to continue receiving items from the server after it's
		// done sending.  Returns errors encountered while closing, or if
		// Close is called after the stream has been canceled.  Like Send,
		// blocks if there is no buffer space available.
		Close() error
	}
}

// SinkSinkStreamClientCall represents the call returned from Sink.SinkStream.
type SinkSinkStreamClientCall interface {
	SinkSinkStreamClientStream
	// Finish performs the equivalent of SendStream().Close, then blocks until
	// the server is done, and returns the positional return values for the call.
	//
	// Finish returns immediately if the call has been canceled; depending on the
	// timing the output could either be an error signaling cancelation, or the
	// valid positional return values from the server.
	//
	// Calling Finish is mandatory for releasing stream resources, unless the call
	// has been canceled or any of the other methods return an error.  Finish should
	// be called at most once.
	Finish() error
}

type implSinkSinkStreamClientCall struct {
	rpc.ClientCall
}

func (c *implSinkSinkStreamClientCall) SendStream() interface {
	Send(item []byte) error
	Close() error
} {
	return implSinkSinkStreamClientCallSend{c}
}

type implSinkSinkStreamClientCallSend struct {
	c *implSinkSinkStreamClientCall
}

func (c implSinkSinkStreamClientCallSend) Send(item []byte) error {
	return c.c.Send(item)
}
func (c implSinkSinkStreamClientCallSend) Close() error {
	return c.c.CloseSend()
}
func (c *implSinkSinkStreamClientCall) Finish() (err error) {
	err = c.ClientCall.Finish()
	return
}

// SinkServerMethods is the interface a server writer
// implements for Sink.
type SinkServerMethods interface {
	// Sync always returns nil.
	Sink(_ *context.T, _ rpc.ServerCall, Payload []byte) error
	// SyncStream always returns nil.
	SinkStream(*context.T, SinkSinkStreamServerCall) error
}

// SinkServerStubMethods is the server interface containing
// Sink methods, as expected by rpc.Server.
// The only difference between this interface and SinkServerMethods
// is the streaming methods.
type SinkServerStubMethods interface {
	// Sync always returns nil.
	Sink(_ *context.T, _ rpc.ServerCall, Payload []byte) error
	// SyncStream always returns nil.
	SinkStream(*context.T, *SinkSinkStreamServerCallStub) error
}

// SinkServerStub adds universal methods to SinkServerStubMethods.
type SinkServerStub interface {
	SinkServerStubMethods
	// Describe the Sink interfaces.
	Describe__() []rpc.InterfaceDesc
}

// SinkServer returns a server stub for Sink.
// It converts an implementation of SinkServerMethods into
// an object that may be used by rpc.Server.
func SinkServer(impl SinkServerMethods) SinkServerStub {
	stub := implSinkServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implSinkServerStub struct {
	impl SinkServerMethods
	gs   *rpc.GlobState
}

func (s implSinkServerStub) Sink(ctx *context.T, call rpc.ServerCall, i0 []byte) error {
	return s.impl.Sink(ctx, call, i0)
}

func (s implSinkServerStub) SinkStream(ctx *context.T, call *SinkSinkStreamServerCallStub) error {
	return s.impl.SinkStream(ctx, call)
}

func (s implSinkServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implSinkServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{SinkDesc}
}

// SinkDesc describes the Sink interface.
var SinkDesc rpc.InterfaceDesc = descSink

// descSink hides the desc to keep godoc clean.
var descSink = rpc.InterfaceDesc{
	Name:    "Sink",
	PkgPath: "github.com/razvanm/rpc-benchmarks/vanadium-core",
	Methods: []rpc.MethodDesc{
		{
			Name: "Sink",
			Doc:  "// Sync always returns nil.",
			InArgs: []rpc.ArgDesc{
				{"Payload", ``}, // []byte
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Read"))},
		},
		{
			Name: "SinkStream",
			Doc:  "// SyncStream always returns nil.",
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Read"))},
		},
	},
}

// SinkSinkStreamServerStream is the server stream for Sink.SinkStream.
type SinkSinkStreamServerStream interface {
	// RecvStream returns the receiver side of the Sink.SinkStream server stream.
	RecvStream() interface {
		// Advance stages an item so that it may be retrieved via Value.  Returns
		// true iff there is an item to retrieve.  Advance must be called before
		// Value is called.  May block if an item is not available.
		Advance() bool
		// Value returns the item that was staged by Advance.  May panic if Advance
		// returned false or was not called.  Never blocks.
		Value() []byte
		// Err returns any error encountered by Advance.  Never blocks.
		Err() error
	}
}

// SinkSinkStreamServerCall represents the context passed to Sink.SinkStream.
type SinkSinkStreamServerCall interface {
	rpc.ServerCall
	SinkSinkStreamServerStream
}

// SinkSinkStreamServerCallStub is a wrapper that converts rpc.StreamServerCall into
// a typesafe stub that implements SinkSinkStreamServerCall.
type SinkSinkStreamServerCallStub struct {
	rpc.StreamServerCall
	valRecv []byte
	errRecv error
}

// Init initializes SinkSinkStreamServerCallStub from rpc.StreamServerCall.
func (s *SinkSinkStreamServerCallStub) Init(call rpc.StreamServerCall) {
	s.StreamServerCall = call
}

// RecvStream returns the receiver side of the Sink.SinkStream server stream.
func (s *SinkSinkStreamServerCallStub) RecvStream() interface {
	Advance() bool
	Value() []byte
	Err() error
} {
	return implSinkSinkStreamServerCallRecv{s}
}

type implSinkSinkStreamServerCallRecv struct {
	s *SinkSinkStreamServerCallStub
}

func (s implSinkSinkStreamServerCallRecv) Advance() bool {
	s.s.errRecv = s.s.Recv(&s.s.valRecv)
	return s.s.errRecv == nil
}
func (s implSinkSinkStreamServerCallRecv) Value() []byte {
	return s.s.valRecv
}
func (s implSinkSinkStreamServerCallRecv) Err() error {
	if s.s.errRecv == io.EOF {
		return nil
	}
	return s.s.errRecv
}

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	return struct{}{}
}
