// Code generated by protoc-gen-go.
// source: sink.proto
// DO NOT EDIT!

/*
Package sink is a generated protocol buffer package.

It is generated from these files:
	sink.proto

It has these top-level messages:
	Payload
	Void
*/
package sink

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Payload struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Payload)(nil), "sink.Payload")
	proto.RegisterType((*Void)(nil), "sink.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Sink service

type SinkClient interface {
	Sink(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Void, error)
	SinkStream(ctx context.Context, opts ...grpc.CallOption) (Sink_SinkStreamClient, error)
}

type sinkClient struct {
	cc *grpc.ClientConn
}

func NewSinkClient(cc *grpc.ClientConn) SinkClient {
	return &sinkClient{cc}
}

func (c *sinkClient) Sink(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/sink.Sink/Sink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkClient) SinkStream(ctx context.Context, opts ...grpc.CallOption) (Sink_SinkStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sink_serviceDesc.Streams[0], c.cc, "/sink.Sink/SinkStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sinkSinkStreamClient{stream}
	return x, nil
}

type Sink_SinkStreamClient interface {
	Send(*Payload) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type sinkSinkStreamClient struct {
	grpc.ClientStream
}

func (x *sinkSinkStreamClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sinkSinkStreamClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Sink service

type SinkServer interface {
	Sink(context.Context, *Payload) (*Void, error)
	SinkStream(Sink_SinkStreamServer) error
}

func RegisterSinkServer(s *grpc.Server, srv SinkServer) {
	s.RegisterService(&_Sink_serviceDesc, srv)
}

func _Sink_Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServer).Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sink.Sink/Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServer).Sink(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sink_SinkStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SinkServer).SinkStream(&sinkSinkStreamServer{stream})
}

type Sink_SinkStreamServer interface {
	SendAndClose(*Void) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type sinkSinkStreamServer struct {
	grpc.ServerStream
}

func (x *sinkSinkStreamServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sinkSinkStreamServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Sink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sink.Sink",
	HandlerType: (*SinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sink",
			Handler:    _Sink_Sink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SinkStream",
			Handler:       _Sink_SinkStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("sink.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0xcc, 0xcb,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x94, 0xb9, 0xd8, 0x03, 0x12,
	0x2b, 0x73, 0xf2, 0x13, 0x53, 0x84, 0x24, 0xb8, 0xd8, 0x0b, 0x20, 0x4c, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0x9e, 0x20, 0x18, 0x57, 0x89, 0x8d, 0x8b, 0x25, 0x2c, 0x3f, 0x33, 0xc5, 0x28, 0x82, 0x8b,
	0x25, 0x18, 0xa8, 0x49, 0x48, 0x19, 0x4a, 0xf3, 0xea, 0x81, 0xcd, 0x83, 0x1a, 0x20, 0xc5, 0x05,
	0xe1, 0x82, 0x94, 0x2a, 0x31, 0x08, 0x69, 0x73, 0x71, 0x81, 0x14, 0x05, 0x97, 0x14, 0xa5, 0x26,
	0xe6, 0xe2, 0x55, 0xaa, 0xc1, 0x98, 0xc4, 0x06, 0x76, 0x93, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0xcd, 0x28, 0xab, 0xa1, 0x00, 0x00, 0x00,
}
